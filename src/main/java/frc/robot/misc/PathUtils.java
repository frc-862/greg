package frc.robot.misc;

import java.io.File;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import frc.lightning.auto.Path;

public class PathUtils {

    /**
     * Reads a path from a list of waypoints generated by 
     * {@link frc.robot.commands.auto.PathConfigCommand PathConfigCommand}.
     * @param pathName Name of path object
     * @param fname Name of file in "deploy/paths/"
     * @param reversed True if the path needs to be driven backwards, false otherwise.
     * @return A {@link frc.lightning.auto.Path Path} object of the given list of waypoints.
     */
    public static Path pathFromWaypointCSV(String pathName, String fname, boolean reversed) {

        var waypoints = new ArrayList<Pose2d>();

        File file = Paths.get(Filesystem.getDeployDirectory().getAbsolutePath(), "paths", fname).toFile();

        try {
            Scanner in = new Scanner(file);
            in.nextLine(); // Skip first line with "X Y Theta"
            while(in.hasNextLine()) {
                double x = in.nextDouble();
                double y = in.nextDouble();
                double theta = in.nextDouble();
                waypoints.add(new Pose2d(x, y, Rotation2d.fromDegrees(theta)));
            }
            in.close();
        } catch (Exception e) {
            System.err.println("COULD NOT READ PATH");
            e.printStackTrace();
        }

        return new Path(pathName, waypoints, reversed);
    }

    public static Path pathFromWaypointCSV(String pathName, String fname) {
        return pathFromWaypointCSV(pathName,fname, false);
    }

}
